// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var HtmlMinPlugin;
    return HtmlMinPlugin = (function(_super) {
      __extends(HtmlMinPlugin, _super);

      HtmlMinPlugin.prototype.name = 'htmlmin';

      HtmlMinPlugin.prototype.config = {
        removeComments: true,
        removeCommentsFromCDATA: false,
        removeCDATASectionsFromCDATA: false,
        collapseWhitespace: true,
        collapseBooleanAttributes: false,
        removeAttributeQuotes: false,
        removeRedundantAttributes: false,
        useShortDoctype: false,
        removeEmptyAttributes: false,
        removeOptionalTags: false,
        removeEmptyElements: false,
        environments: {
          development: {
            enabled: false
          }
        }
      };

      function HtmlMinPlugin() {
        HtmlMinPlugin.__super__.constructor.apply(this, arguments);
        this.htmlmin = require('html-minifier').minify;
        this;
      }

      HtmlMinPlugin.prototype.renderDocument = function(opts, next) {
        var config, content, err, extension, file, htmlminOpts, key, value;
        config = this.getConfig();
        extension = opts.extension, file = opts.file, content = opts.content;
        htmlminOpts = file.get('htmlmin');
        if (extension === 'html' && file.type === 'document' && htmlminOpts) {
          if (typeof htmlminOpts === 'boolean') {
            htmlminOpts = {};
          }
          for (key in config) {
            if (!__hasProp.call(config, key)) continue;
            value = config[key];
            if (key !== 'environments') {
              if (htmlminOpts[key] == null) {
                htmlminOpts[key] = value;
              }
            }
          }
          try {
            opts.content = this.htmlmin(content, htmlminOpts);
          } catch (_error) {
            err = _error;
            return next(err);
          }
        }
        return next();
      };

      return HtmlMinPlugin;

    })(BasePlugin);
  };

}).call(this);
